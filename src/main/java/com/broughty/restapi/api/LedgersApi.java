/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.broughty.restapi.api;

import com.broughty.restapi.model.Item;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-20T19:09:02.000162Z[Europe/London]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "ledgers", description = "the ledgers API")
public interface LedgersApi {

    /**
     * GET /ledgers/{ledgerId}/salesitems : Get Sales Items by Ledger ID
     * Retrieve the information of the user with the matching user ID.
     *
     * @param ledgerId Id of the owning Ledger (required)
     * @param query  (optional)
     * @param queryStr  (optional)
     * @return Ledger found (status code 200)
     *         or No Content (status code 204)
     *         or Ledger Not Found (status code 404)
     */
    @Operation(
        operationId = "getSalesItems",
        summary = "Get Sales Items by Ledger ID",
        description = "Retrieve the information of the user with the matching user ID.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Ledger found", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Item.class)))
            }),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "404", description = "Ledger Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ledgers/{ledgerId}/salesitems",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Item>> getSalesItems(
        @Parameter(name = "ledgerId", description = "Id of the owning Ledger", required = true, in = ParameterIn.PATH) @PathVariable("ledgerId") String ledgerId,
        @Parameter(name = "query", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "queryStr", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "queryStr", required = false) String queryStr
    );

}
